'use strict';

var _run = require('../lib/run');

var _chai = require('chai');

require('babel-polyfill');

function doAsync(result, success) {
  return new Promise(function (resolve, reject) {
    setTimeout(function () {
      if (success) return resolve(result);
      reject(result);
    });
  });
}

describe('#run', function () {
  it('should await a result from doAsync', function (done) {
    (0, _run.run)(regeneratorRuntime.mark(function _callee() {
      var result;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return doAsync('result', true);

            case 2:
              result = _context.sent;

              (0, _chai.expect)('result').to.equal(result);
              done();

            case 5:
            case 'end':
              return _context.stop();
          }
        }
      }, _callee, this);
    }));
  });

  it('should catch an error by try-catch', function (done) {
    (0, _run.run)(regeneratorRuntime.mark(function _callee2() {
      var result;
      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.prev = 0;
              _context2.next = 3;
              return doAsync('An error', false);

            case 3:
              result = _context2.sent;
              _context2.next = 10;
              break;

            case 6:
              _context2.prev = 6;
              _context2.t0 = _context2['catch'](0);

              (0, _chai.expect)('An error').to.equal(_context2.t0);
              done();

            case 10:
            case 'end':
              return _context2.stop();
          }
        }
      }, _callee2, this, [[0, 6]]);
    }));
  });
  it('should catch a final result', function (done) {
    (0, _run.run)(regeneratorRuntime.mark(function _callee3() {
      var result;
      return regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return doAsync('result', true);

            case 2:
              result = _context3.sent;
              return _context3.abrupt('return', 'final ' + result);

            case 4:
            case 'end':
              return _context3.stop();
          }
        }
      }, _callee3, this);
    })).then(function (result) {
      (0, _chai.expect)('final result').equals(result);
      done();
    });
  });

  it('should catch an error', function (done) {
    (0, _run.run)(regeneratorRuntime.mark(function _callee4() {
      var result;
      return regeneratorRuntime.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              _context4.next = 2;
              return doAsync('the error', false);

            case 2:
              result = _context4.sent;
              return _context4.abrupt('return', 'final ' + result);

            case 4:
            case 'end':
              return _context4.stop();
          }
        }
      }, _callee4, this);
    })).catch(function (err) {
      console.log(err);
      (0, _chai.expect)('the error').equals(err);
      done();
    });
  });
});